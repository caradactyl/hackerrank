import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;

/**
 * Problem Statement
 * 
 * Task
 * Given a time range during which the Java Random generator was seeded 
 * and the last ten output values of random.nextInt(1000), guess the 
 * next value to be output by the generator.
 * 
 * Input Format
 * The first line of input is a number N<10 indicating the number of 
 * test cases to follow. For each of the N test cases, a line will follow 
 * containing two space separated Unix timestamps representing the time 
 * during which the random number generator instance was created. 
 * The range between the two timestamps will be at most 1000000. 
 * First ten numbers sequentially generated by the same Random 
 * instance's nextInt(1000) function will follow, one on each line.
 * 
 * Output Format
 * For each test case, output a line consisting of the seed used to 
 * create the generator and the next 10 integers that are output from 
 * random.nextInt(1000), separated by spaces.
 * 
 * @author Cara Magliozzi
 *
 */
public class PRNGSequenceGuessing {

	public static void main(String[] args) throws IOException 
	{
		/*
		 * can either read from STDIN using readFomSTDIN() [required for HackerRank]
		 * or from file using readFromFile(String file)
		 */
//		readfromSTDIN();
		readFromFile("resources/prng_test0.txt");
	}
	
	public static void readFromSTDIN() 
	{
		Scanner in = new Scanner(System.in);
		int N = in.nextInt();
		while (N-- > 0) 
		{
			int start_time = in.nextInt();
			int end_time = in.nextInt();
			
			int[] nums = new int[10];
			for (int i = 0; i < 10; i++) {
				nums[i] = in.nextInt();
			}
			
			findSeed(N, start_time, end_time, nums);
		}
		
	}
	
	public static void readFromFile(String file) throws IOException
	{
		BufferedReader in = new BufferedReader( new FileReader(file) );
		int N = Integer.parseInt(in.readLine());
		
		while (N-- > 0) 
		{
			String[] times = in.readLine().split(" ");
			int start_time = Integer.parseInt(times[0]);
			int end_time = Integer.parseInt(times[1]);
			
			int[] nums = new int[10];
			for (int i = 0; i < 10; i++)
				nums[i] = Integer.parseInt(in.readLine());
			
			findSeed(N, start_time, end_time, nums);
		}
		in.close();
	}
	
	private static void findSeed(int N, int start_time, int end_time, int[] nums) 
	{
		for (int seed = start_time; seed <= end_time; seed++) {
			Random r = new Random(seed);
			boolean good = true;
			for (int i = 0; i < 10; i++) 
			{
				if (r.nextInt(1000) != nums[i])
					good = false;
			}

			if (good) 
			{
				StringBuffer sb = new StringBuffer();
				sb.append(seed);
				for (int i = 0; i < 10; i++) 
				{
					sb.append(" ");
					sb.append(r.nextInt(1000));
				}
				System.out.println(sb.toString());
			}
		}
	}
}
